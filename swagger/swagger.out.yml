openapi: 3.0.1
info:
  title: Rancher API
  description: Swagger reference for Rancher Server API.
  version: 2.1.1
servers:
- url: https://{hostname}/v3
  variables:
    hostname:
      default: ""
      description: Hostname of your Rancher Server
paths:
  /catalogs:
    get:
      description: '`catalogs` Collection'
      responses:
        "200":
          description: Returns list of 'catalogs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogs'
    post:
      description: '`catalogs` Collection'
      requestBody:
        description: Create a new `catalog` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/catalog'
      responses:
        "200":
          description: Returns new `catalog` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog'
  /catalogs/{id}:
    get:
      description: '`catalog` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'catalog' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog'
    put:
      description: '`catalog` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `catalog` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/catalog'
      responses:
        "200":
          description: Returns 'catalog' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog'
    delete:
      description: Delete `catalog` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /clusterAlerts:
    get:
      description: '`clusterAlerts` Collection'
      responses:
        "200":
          description: Returns list of 'clusterAlerts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterAlerts'
    post:
      description: '`clusterAlerts` Collection'
      requestBody:
        description: Create a new `clusterAlert` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterAlert'
      responses:
        "200":
          description: Returns new `clusterAlert` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterAlert'
  /clusterAlerts/{id}:
    get:
      description: '`clusterAlert` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'clusterAlert' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterAlert'
    put:
      description: '`clusterAlert` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `clusterAlert` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterAlert'
      responses:
        "200":
          description: Returns 'clusterAlert' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterAlert'
    delete:
      description: Delete `clusterAlert` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /clusterEvents:
    get:
      description: '`clusterEvents` Collection'
      responses:
        "200":
          description: Returns list of 'clusterEvents'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterEvents'
    post:
      description: '`clusterEvents` Collection'
      requestBody:
        description: Create a new `clusterEvent` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterEvent'
      responses:
        "200":
          description: Returns new `clusterEvent` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterEvent'
  /clusterEvents/{id}:
    get:
      description: '`clusterEvent` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'clusterEvent' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterEvent'
    put:
      description: '`clusterEvent` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `clusterEvent` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterEvent'
      responses:
        "200":
          description: Returns 'clusterEvent' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterEvent'
    delete:
      description: Delete `clusterEvent` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /clusterLoggings:
    get:
      description: '`clusterLoggings` Collection'
      responses:
        "200":
          description: Returns list of 'clusterLoggings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterLoggings'
    post:
      description: '`clusterLoggings` Collection'
      requestBody:
        description: Create a new `clusterLogging` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterLogging'
      responses:
        "200":
          description: Returns new `clusterLogging` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterLogging'
  /clusterLoggings/{id}:
    get:
      description: '`clusterLogging` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'clusterLogging' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterLogging'
    put:
      description: '`clusterLogging` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `clusterLogging` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterLogging'
      responses:
        "200":
          description: Returns 'clusterLogging' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterLogging'
    delete:
      description: Delete `clusterLogging` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /clusterRegistrationTokens:
    get:
      description: '`clusterRegistrationTokens` Collection'
      responses:
        "200":
          description: Returns list of 'clusterRegistrationTokens'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRegistrationTokens'
    post:
      description: '`clusterRegistrationTokens` Collection'
      requestBody:
        description: Create a new `clusterRegistrationToken` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterRegistrationToken'
      responses:
        "200":
          description: Returns new `clusterRegistrationToken` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRegistrationToken'
  /clusterRegistrationTokens/{id}:
    get:
      description: '`clusterRegistrationToken` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'clusterRegistrationToken' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRegistrationToken'
    put:
      description: '`clusterRegistrationToken` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `clusterRegistrationToken` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterRegistrationToken'
      responses:
        "200":
          description: Returns 'clusterRegistrationToken' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRegistrationToken'
    delete:
      description: Delete `clusterRegistrationToken` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /clusterRoleTemplateBindings:
    get:
      description: '`clusterRoleTemplateBindings` Collection'
      responses:
        "200":
          description: Returns list of 'clusterRoleTemplateBindings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRoleTemplateBindings'
    post:
      description: '`clusterRoleTemplateBindings` Collection'
      requestBody:
        description: Create a new `clusterRoleTemplateBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterRoleTemplateBinding'
      responses:
        "200":
          description: Returns new `clusterRoleTemplateBinding` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRoleTemplateBinding'
  /clusterRoleTemplateBindings/{id}:
    get:
      description: '`clusterRoleTemplateBinding` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'clusterRoleTemplateBinding' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRoleTemplateBinding'
    put:
      description: '`clusterRoleTemplateBinding` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `clusterRoleTemplateBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterRoleTemplateBinding'
      responses:
        "200":
          description: Returns 'clusterRoleTemplateBinding' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterRoleTemplateBinding'
    delete:
      description: Delete `clusterRoleTemplateBinding` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /clusters:
    get:
      description: '`clusters` Collection'
      responses:
        "200":
          description: Returns list of 'clusters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusters'
    post:
      description: '`clusters` Collection'
      requestBody:
        description: Create a new `cluster` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cluster'
      responses:
        "200":
          description: Returns new `cluster` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
  /clusters/{id}:
    get:
      description: '`cluster` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'cluster' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
    put:
      description: '`cluster` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `cluster` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cluster'
      responses:
        "200":
          description: Returns 'cluster' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
    delete:
      description: Delete `cluster` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /composeConfigs:
    get:
      description: '`composeConfigs` Collection'
      responses:
        "200":
          description: Returns list of 'composeConfigs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/composeConfigs'
    post:
      description: '`composeConfigs` Collection'
      requestBody:
        description: Create a new `composeConfig` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/composeConfig'
      responses:
        "200":
          description: Returns new `composeConfig` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/composeConfig'
  /composeConfigs/{id}:
    get:
      description: '`composeConfig` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'composeConfig' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/composeConfig'
    put:
      description: '`composeConfig` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `composeConfig` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/composeConfig'
      responses:
        "200":
          description: Returns 'composeConfig' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/composeConfig'
    delete:
      description: Delete `composeConfig` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /globalRoleBindings:
    get:
      description: '`globalRoleBindings` Collection'
      responses:
        "200":
          description: Returns list of 'globalRoleBindings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRoleBindings'
    post:
      description: '`globalRoleBindings` Collection'
      requestBody:
        description: Create a new `globalRoleBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/globalRoleBinding'
      responses:
        "200":
          description: Returns new `globalRoleBinding` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRoleBinding'
  /globalRoleBindings/{id}:
    get:
      description: '`globalRoleBinding` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'globalRoleBinding' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRoleBinding'
    put:
      description: '`globalRoleBinding` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `globalRoleBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/globalRoleBinding'
      responses:
        "200":
          description: Returns 'globalRoleBinding' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRoleBinding'
    delete:
      description: Delete `globalRoleBinding` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /globalRoles:
    get:
      description: '`globalRoles` Collection'
      responses:
        "200":
          description: Returns list of 'globalRoles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRoles'
  /globalRoles/{id}:
    get:
      description: '`globalRole` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'globalRole' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRole'
    put:
      description: '`globalRole` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `globalRole` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/globalRole'
      responses:
        "200":
          description: Returns 'globalRole' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalRole'
    parameters:
    - $ref: '#/components/parameters/id'
  /groupMembers:
    get:
      description: '`groupMembers` Collection'
      responses:
        "200":
          description: Returns list of 'groupMembers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupMembers'
    post:
      description: '`groupMembers` Collection'
      requestBody:
        description: Create a new `groupMember` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupMember'
      responses:
        "200":
          description: Returns new `groupMember` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupMember'
  /groupMembers/{id}:
    get:
      description: '`groupMember` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'groupMember' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupMember'
    put:
      description: '`groupMember` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `groupMember` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupMember'
      responses:
        "200":
          description: Returns 'groupMember' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupMember'
    delete:
      description: Delete `groupMember` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /groups:
    get:
      description: '`groups` Collection'
      responses:
        "200":
          description: Returns list of 'groups'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups'
    post:
      description: '`groups` Collection'
      requestBody:
        description: Create a new `group` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group'
      responses:
        "200":
          description: Returns new `group` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
  /groups/{id}:
    get:
      description: '`group` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'group' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
    put:
      description: '`group` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `group` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group'
      responses:
        "200":
          description: Returns 'group' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
    delete:
      description: Delete `group` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /listenConfigs:
    get:
      description: '`listenConfigs` Collection'
      responses:
        "200":
          description: Returns list of 'listenConfigs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listenConfigs'
    post:
      description: '`listenConfigs` Collection'
      requestBody:
        description: Create a new `listenConfig` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listenConfig'
      responses:
        "200":
          description: Returns new `listenConfig` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listenConfig'
  /listenConfigs/{id}:
    get:
      description: '`listenConfig` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'listenConfig' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listenConfig'
    put:
      description: '`listenConfig` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `listenConfig` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listenConfig'
      responses:
        "200":
          description: Returns 'listenConfig' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listenConfig'
    delete:
      description: Delete `listenConfig` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /nodeDrivers:
    get:
      description: '`nodeDrivers` Collection'
      responses:
        "200":
          description: Returns list of 'nodeDrivers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeDrivers'
    post:
      description: '`nodeDrivers` Collection'
      requestBody:
        description: Create a new `nodeDriver` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeDriver'
      responses:
        "200":
          description: Returns new `nodeDriver` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeDriver'
  /nodeDrivers/{id}:
    get:
      description: '`nodeDriver` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'nodeDriver' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeDriver'
    put:
      description: '`nodeDriver` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `nodeDriver` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeDriver'
      responses:
        "200":
          description: Returns 'nodeDriver' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeDriver'
    delete:
      description: Delete `nodeDriver` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /nodePools:
    get:
      description: '`nodePools` Collection'
      responses:
        "200":
          description: Returns list of 'nodePools'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodePools'
    post:
      description: '`nodePools` Collection'
      requestBody:
        description: Create a new `nodePool` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodePool'
      responses:
        "200":
          description: Returns new `nodePool` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodePool'
  /nodePools/{id}:
    get:
      description: '`nodePool` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'nodePool' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodePool'
    put:
      description: '`nodePool` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `nodePool` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodePool'
      responses:
        "200":
          description: Returns 'nodePool' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodePool'
    delete:
      description: Delete `nodePool` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /nodeTemplates:
    get:
      description: '`nodeTemplates` Collection'
      responses:
        "200":
          description: Returns list of 'nodeTemplates'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeTemplates'
    post:
      description: '`nodeTemplates` Collection'
      requestBody:
        description: Create a new `nodeTemplate` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeTemplate'
      responses:
        "200":
          description: Returns new `nodeTemplate` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeTemplate'
  /nodeTemplates/{id}:
    get:
      description: '`nodeTemplate` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'nodeTemplate' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeTemplate'
    put:
      description: '`nodeTemplate` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `nodeTemplate` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeTemplate'
      responses:
        "200":
          description: Returns 'nodeTemplate' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeTemplate'
    delete:
      description: Delete `nodeTemplate` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /nodes:
    get:
      description: '`nodes` Collection'
      responses:
        "200":
          description: Returns list of 'nodes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodes'
    post:
      description: '`nodes` Collection'
      requestBody:
        description: Create a new `node` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/node'
      responses:
        "200":
          description: Returns new `node` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node'
  /nodes/{id}:
    get:
      description: '`node` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'node' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node'
    put:
      description: '`node` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `node` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/node'
      responses:
        "200":
          description: Returns 'node' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node'
    delete:
      description: Delete `node` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /notifiers:
    get:
      description: '`notifiers` Collection'
      responses:
        "200":
          description: Returns list of 'notifiers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifiers'
    post:
      description: '`notifiers` Collection'
      requestBody:
        description: Create a new `notifier` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifier'
      responses:
        "200":
          description: Returns new `notifier` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifier'
  /notifiers/{id}:
    get:
      description: '`notifier` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'notifier' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifier'
    put:
      description: '`notifier` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `notifier` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifier'
      responses:
        "200":
          description: Returns 'notifier' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifier'
    delete:
      description: Delete `notifier` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /podSecurityPolicyTemplateProjectBindings:
    get:
      description: '`podSecurityPolicyTemplateProjectBindings` Collection'
      responses:
        "200":
          description: Returns list of 'podSecurityPolicyTemplateProjectBindings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/podSecurityPolicyTemplateProjectBindings'
    post:
      description: '`podSecurityPolicyTemplateProjectBindings` Collection'
      requestBody:
        description: Create a new `podSecurityPolicyTemplateProjectBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/podSecurityPolicyTemplateProjectBinding'
      responses:
        "200":
          description: Returns new `podSecurityPolicyTemplateProjectBinding` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/podSecurityPolicyTemplateProjectBinding'
  /podSecurityPolicyTemplateProjectBindings/{id}:
    parameters:
    - $ref: '#/components/parameters/id'
  /podSecurityPolicyTemplates:
    get:
      description: '`podSecurityPolicyTemplates` Collection'
      responses:
        "200":
          description: Returns list of 'podSecurityPolicyTemplates'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/podSecurityPolicyTemplates'
    post:
      description: '`podSecurityPolicyTemplates` Collection'
      requestBody:
        description: Create a new `podSecurityPolicyTemplate` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/podSecurityPolicyTemplate'
      responses:
        "200":
          description: Returns new `podSecurityPolicyTemplate` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/podSecurityPolicyTemplate'
  /podSecurityPolicyTemplates/{id}:
    get:
      description: '`podSecurityPolicyTemplate` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'podSecurityPolicyTemplate' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/podSecurityPolicyTemplate'
    put:
      description: '`podSecurityPolicyTemplate` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `podSecurityPolicyTemplate` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/podSecurityPolicyTemplate'
      responses:
        "200":
          description: Returns 'podSecurityPolicyTemplate' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/podSecurityPolicyTemplate'
    delete:
      description: Delete `podSecurityPolicyTemplate` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /preferences:
    get:
      description: '`preferences` Collection'
      responses:
        "200":
          description: Returns list of 'preferences'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
    post:
      description: '`preferences` Collection'
      requestBody:
        description: Create a new `preference` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preference'
      responses:
        "200":
          description: Returns new `preference` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preference'
  /preferences/{id}:
    get:
      description: '`preference` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'preference' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preference'
    put:
      description: '`preference` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `preference` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preference'
      responses:
        "200":
          description: Returns 'preference' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preference'
    delete:
      description: Delete `preference` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /principals:
    get:
      description: '`principals` Collection'
      responses:
        "200":
          description: Returns list of 'principals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/principals'
  /principals/{id}:
    get:
      description: '`principal` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'principal' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/principal'
    parameters:
    - $ref: '#/components/parameters/id'
  /projectAlerts:
    get:
      description: '`projectAlerts` Collection'
      responses:
        "200":
          description: Returns list of 'projectAlerts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectAlerts'
    post:
      description: '`projectAlerts` Collection'
      requestBody:
        description: Create a new `projectAlert` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectAlert'
      responses:
        "200":
          description: Returns new `projectAlert` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectAlert'
  /projectAlerts/{id}:
    get:
      description: '`projectAlert` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'projectAlert' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectAlert'
    put:
      description: '`projectAlert` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `projectAlert` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectAlert'
      responses:
        "200":
          description: Returns 'projectAlert' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectAlert'
    delete:
      description: Delete `projectAlert` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /projectLoggings:
    get:
      description: '`projectLoggings` Collection'
      responses:
        "200":
          description: Returns list of 'projectLoggings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectLoggings'
    post:
      description: '`projectLoggings` Collection'
      requestBody:
        description: Create a new `projectLogging` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectLogging'
      responses:
        "200":
          description: Returns new `projectLogging` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectLogging'
  /projectLoggings/{id}:
    get:
      description: '`projectLogging` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'projectLogging' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectLogging'
    put:
      description: '`projectLogging` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `projectLogging` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectLogging'
      responses:
        "200":
          description: Returns 'projectLogging' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectLogging'
    delete:
      description: Delete `projectLogging` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /projectNetworkPolicies:
    get:
      description: '`projectNetworkPolicies` Collection'
      responses:
        "200":
          description: Returns list of 'projectNetworkPolicies'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectNetworkPolicies'
  /projectNetworkPolicies/{id}:
    get:
      description: '`projectNetworkPolicy` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'projectNetworkPolicy' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectNetworkPolicy'
    parameters:
    - $ref: '#/components/parameters/id'
  /projectRoleTemplateBindings:
    get:
      description: '`projectRoleTemplateBindings` Collection'
      responses:
        "200":
          description: Returns list of 'projectRoleTemplateBindings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectRoleTemplateBindings'
    post:
      description: '`projectRoleTemplateBindings` Collection'
      requestBody:
        description: Create a new `projectRoleTemplateBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectRoleTemplateBinding'
      responses:
        "200":
          description: Returns new `projectRoleTemplateBinding` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectRoleTemplateBinding'
  /projectRoleTemplateBindings/{id}:
    get:
      description: '`projectRoleTemplateBinding` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'projectRoleTemplateBinding' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectRoleTemplateBinding'
    put:
      description: '`projectRoleTemplateBinding` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `projectRoleTemplateBinding` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectRoleTemplateBinding'
      responses:
        "200":
          description: Returns 'projectRoleTemplateBinding' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectRoleTemplateBinding'
    delete:
      description: Delete `projectRoleTemplateBinding` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /projects:
    get:
      description: '`projects` Collection'
      responses:
        "200":
          description: Returns list of 'projects'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projects'
    post:
      description: '`projects` Collection'
      requestBody:
        description: Create a new `project` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        "200":
          description: Returns new `project` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
  /projects/{id}:
    get:
      description: '`project` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'project' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
    put:
      description: '`project` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `project` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        "200":
          description: Returns 'project' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
    delete:
      description: Delete `project` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /roleTemplates:
    get:
      description: '`roleTemplates` Collection'
      responses:
        "200":
          description: Returns list of 'roleTemplates'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleTemplates'
    post:
      description: '`roleTemplates` Collection'
      requestBody:
        description: Create a new `roleTemplate` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleTemplate'
      responses:
        "200":
          description: Returns new `roleTemplate` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleTemplate'
  /roleTemplates/{id}:
    get:
      description: '`roleTemplate` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'roleTemplate' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleTemplate'
    put:
      description: '`roleTemplate` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `roleTemplate` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleTemplate'
      responses:
        "200":
          description: Returns 'roleTemplate' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleTemplate'
    delete:
      description: Delete `roleTemplate` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /settings:
    get:
      description: '`settings` Collection'
      responses:
        "200":
          description: Returns list of 'settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settings'
    post:
      description: '`settings` Collection'
      requestBody:
        description: Create a new `setting` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setting'
      responses:
        "200":
          description: Returns new `setting` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/setting'
  /settings/{id}:
    get:
      description: '`setting` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'setting' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/setting'
    put:
      description: '`setting` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `setting` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setting'
      responses:
        "200":
          description: Returns 'setting' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/setting'
    delete:
      description: Delete `setting` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /templateContents:
    get:
      description: '`templateContents` Collection'
      responses:
        "200":
          description: Returns list of 'templateContents'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateContents'
    post:
      description: '`templateContents` Collection'
      requestBody:
        description: Create a new `templateContent` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateContent'
      responses:
        "200":
          description: Returns new `templateContent` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateContent'
  /templateContents/{id}:
    get:
      description: '`templateContent` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'templateContent' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateContent'
    put:
      description: '`templateContent` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `templateContent` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateContent'
      responses:
        "200":
          description: Returns 'templateContent' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateContent'
    delete:
      description: Delete `templateContent` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /templateVersions:
    get:
      description: '`templateVersions` Collection'
      responses:
        "200":
          description: Returns list of 'templateVersions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateVersions'
    post:
      description: '`templateVersions` Collection'
      requestBody:
        description: Create a new `templateVersion` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateVersion'
      responses:
        "200":
          description: Returns new `templateVersion` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateVersion'
  /templateVersions/{id}:
    get:
      description: '`templateVersion` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'templateVersion' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateVersion'
    put:
      description: '`templateVersion` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `templateVersion` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateVersion'
      responses:
        "200":
          description: Returns 'templateVersion' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateVersion'
    delete:
      description: Delete `templateVersion` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /templates:
    get:
      description: '`templates` Collection'
      responses:
        "200":
          description: Returns list of 'templates'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templates'
    post:
      description: '`templates` Collection'
      requestBody:
        description: Create a new `template` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/template'
      responses:
        "200":
          description: Returns new `template` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
  /templates/{id}:
    get:
      description: '`template` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'template' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
    put:
      description: '`template` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `template` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/template'
      responses:
        "200":
          description: Returns 'template' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
    delete:
      description: Delete `template` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /tokens:
    get:
      description: '`tokens` Collection'
      responses:
        "200":
          description: Returns list of 'tokens'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokens'
    post:
      description: '`tokens` Collection'
      requestBody:
        description: Create a new `token` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        "200":
          description: Returns new `token` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
  /tokens/{id}:
    get:
      description: '`token` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'token' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
    put:
      description: '`token` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `token` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        "200":
          description: Returns 'token' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
    delete:
      description: Delete `token` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
  /users:
    get:
      description: '`users` Collection'
      responses:
        "200":
          description: Returns list of 'users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
    post:
      description: '`users` Collection'
      requestBody:
        description: Create a new `user` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          description: Returns new `user` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  /users/{id}:
    get:
      description: '`user` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Returns 'user' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    put:
      description: '`user` Resource'
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        description: Update `user` object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          description: Returns 'user' object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    delete:
      description: Delete `user` Resource
      responses:
        "204":
          description: Delete Successful
    parameters:
    - $ref: '#/components/parameters/id'
components:
  schemas:
    "":
      type: object
    allowedFlexVolume:
      type: object
      properties:
        driver:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    allowedHostPath:
      type: object
      properties:
        pathPrefix:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    amazonElasticContainerServiceConfig:
      required:
      - accessKey
      - secretKey
      type: object
      properties:
        accessKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ami:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        associateWorkerNodePublicIp:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        instanceType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        maximumNodes:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        minimumNodes:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        region:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        secretKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        securityGroups:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        serviceRole:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subnets:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        virtualNetwork:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    amazonec2config:
      type: object
      properties:
        accessKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS Access Key'
          default: ""
        ami:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS machine image'
          default: ""
        blockDurationMinutes:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS spot instance duration
            in minutes (60, 120, 180, 240, 300, or 360)'
          default: "0"
        deviceName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS root device name'
          default: /dev/sda1
        endpoint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Optional endpoint URL (hostname
            only or fully qualified URI)'
          default: ""
        iamInstanceProfile:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS IAM Instance Profile'
          default: ""
        insecureTransport:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Disable SSL when sending
            requests'
          default: false
        instanceType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS instance type'
          default: t2.micro
        keypairName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS keypair to use; requires
            --amazonec2-ssh-keypath'
          default: ""
        monitoring:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Set this flag to enable
            CloudWatch monitoring'
          default: false
        openPort:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; Make the specified port
            number accessible from the Internet'
          items:
            type: string
        privateAddressOnly:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Only use a private IP address'
          default: false
        region:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS region'
          default: us-east-1
        requestSpotInstance:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Set this flag to request
            spot instance'
          default: false
        retries:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Set retry count for recoverable
            failures (use -1 to disable)'
          default: "5"
        rootSize:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS root disk size (in GB)'
          default: "16"
        secretKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS Secret Key'
          format: password
        securityGroup:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; AWS VPC security group'
          default:
          - rancher-nodes
          items:
            type: string
        securityGroupReadonly:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Skip adding default rules
            to security groups'
          default: false
        sessionToken:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS Session Token'
          default: ""
        spotPrice:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS spot instance bid price
            (in dollar)'
          default: "0.50"
        sshKeypath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; SSH Key for Instance'
          default: ""
        sshUser:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Set the name of the ssh
            user'
          default: ubuntu
        subnetId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS VPC subnet id'
          default: ""
        tags:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS Tags (e.g. key1,value1,key2,value2)'
          default: ""
        useEbsOptimizedInstance:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Create an EBS optimized
            instance'
          default: false
        usePrivateAddress:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Force the usage of private
            IP address'
          default: false
        userdata:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; path to file with cloud-init
            user data'
          default: ""
        volumeType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Amazon EBS volume type'
          default: gp2
        vpcId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS VPC id'
          default: ""
        zone:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; AWS zone for instance (i.e.
            a,b,c,d,e)'
          default: a
    attachedVolume:
      type: object
      properties:
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    authnConfig:
      type: object
      properties:
        options:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        sans:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        strategy:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: x509
          nullable: true
    authzConfig:
      type: object
      properties:
        mode:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        options:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
    awsCloudProvider:
      type: object
    azureCloudProvider:
      type: object
      properties:
        aadClientCertPassword:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        aadClientCertPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        aadClientId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        aadClientSecret:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        cloud:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        cloudProviderBackoff:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        cloudProviderBackoffDuration:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        cloudProviderBackoffExponent:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        cloudProviderBackoffJitter:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        cloudProviderBackoffRetries:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        cloudProviderRateLimit:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        cloudProviderRateLimitBucket:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        cloudProviderRateLimitQPS:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        location:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        maximumLoadBalancerRuleCount:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        primaryAvailabilitySetName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        primaryScaleSetName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        resourceGroup:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        routeTableName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        securityGroupName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subnetName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subscriptionId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        tenantId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        useInstanceMetadata:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        useManagedIdentityExtension:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        vmType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        vnetName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        vnetResourceGroup:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    azureKubernetesServiceConfig:
      required:
      - resourceGroup
      - clientId
      - clientSecret
      - subscriptionId
      - tenantId
      - sshPublicKeyContents
      type: object
      properties:
        adminUsername:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        agentDnsPrefix:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        agentPoolName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        agentVmSize:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        baseUrl:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientSecret:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        count:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        dnsServiceIp:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        dockerBridgeCidr:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kubernetesVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        location:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        masterDnsPrefix:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        osDiskSizeGb:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        resourceGroup:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        serviceCidr:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        sshPublicKeyContents:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subnet:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subscriptionId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        tags:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        tenantId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        virtualNetwork:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        virtualNetworkResourceGroup:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    azureconfig:
      type: object
      properties:
        availabilitySet:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Availability Set to
            place the virtual machine into'
          default: docker-machine
        clientId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Service Principal
            Account ID (optional, browser auth is used if not specified)'
          default: ""
        clientSecret:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Service Principal
            Account password (optional, browser auth is used if not specified)'
          format: password
        customData:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Path to file with custom-data'
          default: ""
        dns:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; A unique DNS label for the
            public IP adddress'
          default: ""
        dockerPort:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Port number for Docker engine'
          default: "2376"
        environment:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure environment (e.g.
            AzurePublicCloud, AzureChinaCloud)'
          default: AzurePublicCloud
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure virtual machine OS
            image'
          default: canonical:UbuntuServer:16.04.0-LTS:latest
        location:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure region to create the
            virtual machine'
          default: westus
        noPublicIp:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Do not create a public IP
            address for the machine'
          default: false
        openPort:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; Make the specified port
            number accessible from the Internet'
          items:
            type: string
        privateIpAddress:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Specify a static private
            IP address for the machine'
          default: ""
        resourceGroup:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Resource Group name
            (will be created if missing)'
          default: docker-machine
        size:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Size for Azure Virtual Machine'
          default: Standard_A2
        sshUser:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Username for SSH login'
          default: docker-user
        staticPublicIp:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Assign a static public IP
            address to the machine'
          default: false
        storageType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Type of Storage Account
            to host the OS Disk for the machine'
          default: Standard_LRS
        subnet:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Subnet Name to be
            used within the Virtual Network'
          default: docker-machine
        subnetPrefix:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Private CIDR block to be
            used for the new subnet, should comply RFC 1918'
          default: 192.168.0.0/16
        subscriptionId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Subscription ID'
          default: ""
        usePrivateIp:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; Use private IP address of
            the machine to connect'
          default: false
        vnet:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Azure Virtual Network name
            to connect the virtual machine (in [resourcegroup:]name format)'
          default: docker-machine-vnet
    bastionHost:
      type: object
      properties:
        address:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        port:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        sshAgentAuth:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        sshKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        sshKeyPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    blockStorageOpenstackOpts:
      type: object
      properties:
        bs-version:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ignore-volume-az:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        trust-device-path:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
    calicoNetworkProvider:
      type: object
      properties:
        cloudProvider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    canalNetworkProvider:
      type: object
      properties:
        iface:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    catalog:
      required:
      - url
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        branch:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        commit:
          type: string
          nullable: true
          readOnly: true
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/catalogCondition'
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kind:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        lastRefreshTimestamp:
          type: string
          nullable: true
          readOnly: true
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        url:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    catalogCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    catalogs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/catalog'
      allOf:
      - $ref: '#/components/schemas/collection'
    cloudProvider:
      type: object
      properties:
        awsCloudProvider:
          $ref: '#/components/schemas/awsCloudProvider'
        azureCloudProvider:
          $ref: '#/components/schemas/azureCloudProvider'
        customCloudProvider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        openstackCloudProvider:
          $ref: '#/components/schemas/openstackCloudProvider'
        vsphereCloudProvider:
          $ref: '#/components/schemas/vsphereCloudProvider'
    cluster:
      type: object
      properties:
        agentImage:
          type: string
          nullable: true
          readOnly: true
        allocatable:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        amazonElasticContainerServiceConfig:
          $ref: '#/components/schemas/amazonElasticContainerServiceConfig'
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        apiEndpoint:
          type: string
          nullable: true
          readOnly: true
        appliedEnableNetworkPolicy:
          type: boolean
          default: false
          readOnly: true
        appliedPodSecurityPolicyTemplateId:
          type: string
          nullable: true
          readOnly: true
        appliedSpec:
          $ref: '#/components/schemas/clusterSpec'
          readOnly: true
        azureKubernetesServiceConfig:
          $ref: '#/components/schemas/azureKubernetesServiceConfig'
        caCert:
          type: string
          nullable: true
          readOnly: true
        capacity:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        componentStatuses:
          type: array
          items:
            $ref: '#/components/schemas/clusterComponentStatus'
          nullable: true
          readOnly: true
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/clusterCondition'
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        defaultClusterRoleForProjectMembers:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of roleTemplate'
          nullable: true
        defaultPodSecurityPolicyTemplateId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of podSecurityPolicyTemplate'
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        desiredAgentImage:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        dockerRootDir:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: /var/lib/docker
          nullable: true
        driver:
          type: string
          nullable: true
          readOnly: true
        enableNetworkPolicy:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
          nullable: true
        failedSpec:
          $ref: '#/components/schemas/clusterSpec'
          readOnly: true
        googleKubernetesEngineConfig:
          $ref: '#/components/schemas/googleKubernetesEngineConfig'
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        importedConfig:
          $ref: '#/components/schemas/importedConfig'
          readOnly: true
        internal:
          type: boolean
          default: false
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        limits:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        rancherKubernetesEngineConfig:
          $ref: '#/components/schemas/rancherKubernetesEngineConfig'
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        requested:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        state:
          type: string
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        version:
          $ref: '#/components/schemas/info'
          readOnly: true
    clusterAlert:
      required:
      - recipients
      - severity
      - name
      - repeatIntervalSeconds
      - initialWaitSeconds
      type: object
      properties:
        alertState:
          enum:
          - active
          - inactive
          - alerting
          - muted
          type: string
          default: active
          nullable: true
          readOnly: true
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        initialWaitSeconds:
          minimum: 0
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 180
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        recipients:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/recipient'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        repeatIntervalSeconds:
          minimum: 0
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3600
        severity:
          enum:
          - info
          - critical
          - warning
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: critical
          nullable: true
        state:
          type: string
          readOnly: true
        targetEvent:
          $ref: '#/components/schemas/targetEvent'
        targetNode:
          $ref: '#/components/schemas/targetNode'
        targetSystemService:
          $ref: '#/components/schemas/targetSystemService'
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    clusterAlerts:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/clusterAlert'
      allOf:
      - $ref: '#/components/schemas/collection'
    clusterComponentStatus:
      type: object
      properties:
        conditions:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/componentCondition'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    clusterCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    clusterEvent:
      type: object
      properties:
        action:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        count:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        eventTime:
          $ref: '#/components/schemas/microTime'
        eventType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        firstTimestamp:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: date-time
          nullable: true
        involvedObject:
          $ref: '#/components/schemas/objectReference'
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        lastTimestamp:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: date-time
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        related:
          $ref: '#/components/schemas/objectReference'
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        reportingComponent:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reportingInstance:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        series:
          $ref: '#/components/schemas/eventSeries'
        source:
          $ref: '#/components/schemas/eventSource'
        uuid:
          type: string
          nullable: true
          readOnly: true
    clusterEvents:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/clusterEvent'
      allOf:
      - $ref: '#/components/schemas/collection'
    clusterLogging:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        appliedSpec:
          $ref: '#/components/schemas/clusterLoggingSpec'
          readOnly: true
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/loggingCondition'
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        elasticsearchConfig:
          $ref: '#/components/schemas/elasticsearchConfig'
        failedSpec:
          $ref: '#/components/schemas/clusterLoggingSpec'
          readOnly: true
        fluentForwarderConfig:
          $ref: '#/components/schemas/fluentForwarderConfig'
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        kafkaConfig:
          $ref: '#/components/schemas/kafkaConfig'
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        outputFlushInterval:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3
        outputTags:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        splunkConfig:
          $ref: '#/components/schemas/splunkConfig'
        state:
          type: string
          readOnly: true
        syslogConfig:
          $ref: '#/components/schemas/syslogConfig'
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    clusterLoggingSpec:
      type: object
      properties:
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        displayName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        elasticsearchConfig:
          $ref: '#/components/schemas/elasticsearchConfig'
        fluentForwarderConfig:
          $ref: '#/components/schemas/fluentForwarderConfig'
        kafkaConfig:
          $ref: '#/components/schemas/kafkaConfig'
        outputFlushInterval:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3
        outputTags:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        splunkConfig:
          $ref: '#/components/schemas/splunkConfig'
        syslogConfig:
          $ref: '#/components/schemas/syslogConfig'
    clusterLoggings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/clusterLogging'
      allOf:
      - $ref: '#/components/schemas/collection'
    clusterRegistrationToken:
      required:
      - clusterId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        command:
          type: string
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        insecureCommand:
          type: string
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        manifestUrl:
          type: string
          nullable: true
          readOnly: true
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        nodeCommand:
          type: string
          nullable: true
          readOnly: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        token:
          type: string
          nullable: true
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        windowsNodeCommand:
          type: string
          nullable: true
          readOnly: true
    clusterRegistrationTokens:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/clusterRegistrationToken'
      allOf:
      - $ref: '#/components/schemas/collection'
    clusterRoleTemplateBinding:
      required:
      - clusterId
      - roleTemplateId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        groupId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of group'
          nullable: true
        groupPrincipalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of principal'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        roleTemplateId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of roleTemplate'
          nullable: true
        userId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of user'
          nullable: true
        userPrincipalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of principal'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    clusterRoleTemplateBindings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/clusterRoleTemplateBinding'
      allOf:
      - $ref: '#/components/schemas/collection'
    clusterSpec:
      required:
      - displayName
      type: object
      properties:
        amazonElasticContainerServiceConfig:
          $ref: '#/components/schemas/amazonElasticContainerServiceConfig'
        azureKubernetesServiceConfig:
          $ref: '#/components/schemas/azureKubernetesServiceConfig'
        defaultClusterRoleForProjectMembers:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of roleTemplate'
          nullable: true
        defaultPodSecurityPolicyTemplateId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of podSecurityPolicyTemplate'
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        desiredAgentImage:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        displayName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        dockerRootDir:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: /var/lib/docker
          nullable: true
        enableNetworkPolicy:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
          nullable: true
        googleKubernetesEngineConfig:
          $ref: '#/components/schemas/googleKubernetesEngineConfig'
        importedConfig:
          $ref: '#/components/schemas/importedConfig'
          readOnly: true
        internal:
          type: boolean
          default: false
          readOnly: true
        rancherKubernetesEngineConfig:
          $ref: '#/components/schemas/rancherKubernetesEngineConfig'
    clusters:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/cluster'
      allOf:
      - $ref: '#/components/schemas/collection'
    collection:
      type: object
      properties:
        resourseType:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
    componentCondition:
      type: object
      properties:
        error:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    composeCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    composeConfig:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        rancherCompose:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/composeStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    composeConfigs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/composeConfig'
      allOf:
      - $ref: '#/components/schemas/collection'
    composeStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/composeCondition'
          nullable: true
          readOnly: true
    condition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    cpuInfo:
      type: object
      properties:
        count:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
    customConfig:
      type: object
      properties:
        address:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        dockerSocket:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        internalAddress:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        label:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        sshKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    digitaloceanconfig:
      type: object
      properties:
        accessToken:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Digital Ocean access token'
          format: password
        backups:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; enable backups for droplet'
          default: false
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Digital Ocean Image'
          default: ubuntu-16-04-x64
        ipv6:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; enable ipv6 for droplet'
          default: false
        monitoring:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; enable monitoring for droplet'
          default: false
        privateNetworking:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`; enable private networking
            for droplet'
          default: false
        region:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Digital Ocean region'
          default: nyc3
        size:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Digital Ocean size'
          default: s-1vcpu-1gb
        sshKeyFingerprint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; SSH key fingerprint'
          default: ""
        sshKeyPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; SSH private key path '
          default: ""
        sshPort:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; SSH port'
          default: "22"
        sshUser:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; SSH username'
          default: root
        tags:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; comma-separated list of
            tags to apply to the Droplet'
          default: ""
        userdata:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; path to file with cloud-init
            user-data'
          default: ""
    diskVsphereOpts:
      type: object
      properties:
        scsicontrollertype:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    dockerInfo:
      type: object
      properties:
        architecture:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        cgroupDriver:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        debug:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        dockerRootDir:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        driver:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        experimentalBuild:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        httpProxy:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        httpsProxy:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        indexServerAddress:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kernelVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        loggingDriver:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        noProxy:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        operatingSystem:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        osType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        serverVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    elasticsearchConfig:
      required:
      - dateFormat
      - indexPrefix
      - endpoint
      type: object
      properties:
        authPassword:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        authUsername:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        certificate:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientCert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientKeyPass:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        dateFormat:
          enum:
          - YYYY-MM-DD
          - YYYY-MM
          - YYYY
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: YYYY-MM-DD
          nullable: true
        endpoint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        indexPrefix:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        sslVerify:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
    etcdService:
      type: object
      properties:
        caCert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        cert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        creation:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        externalUrls:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          default:
            election-timeout: "5000"
            heartbeat-interval: "500"
          nullable: true
          example:
            key: value
        extraBinds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraEnv:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        key:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        path:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        retention:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        snapshot:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
    eventSeries:
      type: object
      properties:
        count:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        lastObservedTime:
          $ref: '#/components/schemas/microTime'
        state:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    eventSource:
      type: object
      properties:
        component:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        host:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    flannelNetworkProvider:
      type: object
      properties:
        iface:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    fluentForwarderConfig:
      required:
      - fluentServers
      type: object
      properties:
        certificate:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        compress:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
        enableTls:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        fluentServers:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/fluentServer'
          nullable: true
    fluentServer:
      required:
      - endpoint
      type: object
      properties:
        endpoint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        hostname:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        sharedKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        standby:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        username:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        weight:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 100
    fsGroupStrategyOptions:
      type: object
      properties:
        ranges:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/idRange'
          nullable: true
        rule:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    globalOpenstackOpts:
      type: object
      properties:
        auth-url:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ca-file:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        domain-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        domain-name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        region:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        tenant-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        tenant-name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        trust-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        user-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        username:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    globalRole:
      required:
      - newUserDefault
      - name
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        newUserDefault:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        rules:
          type: array
          description: 'Allowed in Methods: `POST`'
          items:
            $ref: '#/components/schemas/policyRule'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    globalRoleBinding:
      required:
      - userId
      - globalRoleId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        globalRoleId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of globalRole'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        userId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of user'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    globalRoleBindings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/globalRoleBinding'
      allOf:
      - $ref: '#/components/schemas/collection'
    globalRoles:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/globalRole'
      allOf:
      - $ref: '#/components/schemas/collection'
    globalVsphereOpts:
      type: object
      properties:
        datacenter:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        datacenters:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        datastore:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        insecure-flag:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        port:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        server:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        soap-roundtrip-count:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        vm-name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        vm-uuid:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        working-dir:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    googleKubernetesEngineConfig:
      required:
      - nodeCount
      - zone
      - projectId
      - credential
      type: object
      properties:
        clusterIpv4Cidr:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        credential:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        diskSizeGb:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        enableAlphaFeature:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        enableHorizontalPodAutoscaling:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        enableHttpLoadBalancing:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        enableKubernetesDashboard:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        enableLegacyAbac:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        enableNetworkPolicyConfig:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        enableStackdriverLogging:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        enableStackdriverMonitoring:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        imageType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        locations:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        machineType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        maintenanceWindow:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        masterVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        network:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        nodeCount:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        nodeVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        projectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subNetwork:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        zone:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    group:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    groupMember:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        groupId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of group'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        principalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of principal'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    groupMembers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/groupMember'
      allOf:
      - $ref: '#/components/schemas/collection'
    groups:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/group'
      allOf:
      - $ref: '#/components/schemas/collection'
    hostPortRange:
      type: object
      properties:
        max:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        min:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
    idRange:
      type: object
      properties:
        max:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        min:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
    importedConfig:
      type: object
      properties:
        kubeConfig:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
    info:
      type: object
      properties:
        buildDate:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        compiler:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        gitCommit:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        gitTreeState:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        gitVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        goVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        major:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        minor:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        platform:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    ingressConfig:
      type: object
      properties:
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        nodeSelector:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        options:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        provider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: nginx
          nullable: true
    kafkaConfig:
      required:
      - topic
      type: object
      properties:
        brokerEndpoints:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        certificate:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientCert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        topic:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        zookeeperEndpoint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    kubeAPIService:
      type: object
      properties:
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        extraBinds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraEnv:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        podSecurityPolicy:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        serviceClusterIpRange:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        serviceNodePortRange:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 30000-32767
          nullable: true
    kubeControllerService:
      type: object
      properties:
        clusterCidr:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        extraBinds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraEnv:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        serviceClusterIpRange:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    kubeletService:
      type: object
      properties:
        clusterDnsServer:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clusterDomain:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        extraBinds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraEnv:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        failSwapOn:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        infraContainerImage:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    kubeproxyService:
      type: object
      properties:
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        extraBinds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraEnv:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    kubernetesInfo:
      type: object
      properties:
        kubeProxyVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kubeletVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    listenConfig:
      type: object
      properties:
        algorithm:
          type: string
          nullable: true
          readOnly: true
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        caCerts:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        cert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        certFingerprint:
          type: string
          nullable: true
          readOnly: true
        cn:
          type: string
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        domains:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        enabled:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
        expiresAt:
          type: string
          nullable: true
          readOnly: true
        generatedCerts:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        issuedAt:
          type: string
          nullable: true
          readOnly: true
        issuer:
          type: string
          nullable: true
          readOnly: true
        key:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        keySize:
          type: integer
          default: 0
          readOnly: true
        knownIps:
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        mode:
          enum:
          - https
          - http
          - acme
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        serialNumber:
          type: string
          nullable: true
          readOnly: true
        subjectAlternativeNames:
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        tos:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          default: auto
          items:
            type: string
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        version:
          type: integer
          default: 0
          readOnly: true
    listenConfigs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/listenConfig'
      allOf:
      - $ref: '#/components/schemas/collection'
    loadBalancerOpenstackOpts:
      type: object
      properties:
        create-monitor:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        floating-network-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lb-method:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lb-provider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lb-version:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        manage-security-groups:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        monitor-delay:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        monitor-max-retries:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        monitor-timeout:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        subnet-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        use-octavia:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
    loggingCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    memoryInfo:
      type: object
      properties:
        memTotalKiB:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
    metadataOpenstackOpts:
      type: object
      properties:
        request-timeout:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        search-order:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    microTime:
      type: object
    monitoringConfig:
      type: object
      properties:
        options:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        provider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: metrics-server
          nullable: true
    namespaceResourceQuota:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/resourceQuotaLimit'
    networkConfig:
      type: object
      properties:
        calicoNetworkProvider:
          $ref: '#/components/schemas/calicoNetworkProvider'
        canalNetworkProvider:
          $ref: '#/components/schemas/canalNetworkProvider'
        flannelNetworkProvider:
          $ref: '#/components/schemas/flannelNetworkProvider'
        options:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        plugin:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: canal
          nullable: true
    networkVshpereOpts:
      type: object
      properties:
        public-network:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    node:
      required:
      - requestedHostname
      - clusterId
      type: object
      properties:
        allocatable:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        amazonec2Config:
          $ref: '#/components/schemas/amazonec2config'
        annotations:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        azureConfig:
          $ref: '#/components/schemas/azureconfig'
        capacity:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of cluster'
          nullable: true
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/nodeCondition'
          nullable: true
          readOnly: true
        controlPlane:
          type: boolean
          description: 'Allowed in Methods: `POST`'
          default: false
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        customConfig:
          $ref: '#/components/schemas/customConfig'
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        digitaloceanConfig:
          $ref: '#/components/schemas/digitaloceanconfig'
        dockerInfo:
          $ref: '#/components/schemas/dockerInfo'
          readOnly: true
        etcd:
          type: boolean
          description: 'Allowed in Methods: `POST`'
          default: false
        externalIpAddress:
          type: string
          nullable: true
          readOnly: true
        hostname:
          type: string
          nullable: true
          readOnly: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        imported:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        info:
          $ref: '#/components/schemas/nodeInfo'
          readOnly: true
        ipAddress:
          type: string
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        limits:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        nodeName:
          type: string
          nullable: true
          readOnly: true
        nodePoolId:
          type: string
          description: Id of nodePool
          nullable: true
          readOnly: true
        nodeTaints:
          type: array
          items:
            $ref: '#/components/schemas/taint'
          nullable: true
          readOnly: true
        nodeTemplateId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of nodeTemplate'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        podCidr:
          type: string
          nullable: true
          readOnly: true
        providerId:
          type: string
          nullable: true
          readOnly: true
        publicEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/publicEndpoint'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        requested:
          type: object
          nullable: true
          readOnly: true
          example:
            key: value
        requestedHostname:
          $ref: '#/components/schemas/'
        sshUser:
          type: string
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        taints:
          type: array
          description: 'Allowed in Methods: `PUT`'
          items:
            $ref: '#/components/schemas/taint'
          nullable: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        unschedulable:
          type: boolean
          default: false
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        vmwarevsphereConfig:
          $ref: '#/components/schemas/vmwarevsphereconfig'
        volumesAttached:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/attachedVolume'
          nullable: true
          readOnly: true
        volumesInUse:
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        worker:
          type: boolean
          description: 'Allowed in Methods: `POST`'
          default: false
    nodeCondition:
      type: object
      properties:
        lastHeartbeatTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: date-time
          nullable: true
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: date-time
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    nodeDriver:
      required:
      - url
      type: object
      properties:
        active:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        builtin:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        checksum:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        externalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/nodeDriverStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uiUrl:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        url:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        whitelistDomains:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
    nodeDriverStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/condition'
          nullable: true
          readOnly: true
    nodeDrivers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/nodeDriver'
      allOf:
      - $ref: '#/components/schemas/collection'
    nodeInfo:
      type: object
      properties:
        cpu:
          $ref: '#/components/schemas/cpuInfo'
        kubernetes:
          $ref: '#/components/schemas/kubernetesInfo'
        memory:
          $ref: '#/components/schemas/memoryInfo'
        os:
          $ref: '#/components/schemas/osInfo'
    nodePool:
      required:
      - quantity
      - hostnamePrefix
      - nodeTemplateId
      - clusterId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of cluster'
          nullable: true
        controlPlane:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        displayName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        etcd:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        hostnamePrefix:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        nodeAnnotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        nodeLabels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        nodeTemplateId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of nodeTemplate'
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        quantity:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 1
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/nodePoolStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        worker:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
    nodePoolStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/condition'
          nullable: true
          readOnly: true
    nodePools:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/nodePool'
      allOf:
      - $ref: '#/components/schemas/collection'
    nodeTemplate:
      type: object
      properties:
        amazonec2Config:
          $ref: '#/components/schemas/amazonec2config'
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        authCertificateAuthority:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        authKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        azureConfig:
          $ref: '#/components/schemas/azureconfig'
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        digitaloceanConfig:
          $ref: '#/components/schemas/digitaloceanconfig'
        dockerVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        driver:
          type: string
          nullable: true
          readOnly: true
        engineEnv:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        engineInsecureRegistry:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        engineInstallURL:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        engineLabel:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        engineOpt:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        engineRegistryMirror:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        engineStorageDriver:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/nodeTemplateStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        useInternalIpAddress:
          type: boolean
          description: 'Allowed in Methods: `POST`'
          default: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        vmwarevsphereConfig:
          $ref: '#/components/schemas/vmwarevsphereconfig'
    nodeTemplateCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    nodeTemplateStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/nodeTemplateCondition'
          nullable: true
          readOnly: true
    nodeTemplates:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/nodeTemplate'
      allOf:
      - $ref: '#/components/schemas/collection'
    nodes:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/node'
      allOf:
      - $ref: '#/components/schemas/collection'
    notifier:
      required:
      - name
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        pagerdutyConfig:
          $ref: '#/components/schemas/pagerdutyConfig'
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        slackConfig:
          $ref: '#/components/schemas/slackConfig'
        smtpConfig:
          $ref: '#/components/schemas/smtpConfig'
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/notifierStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        webhookConfig:
          $ref: '#/components/schemas/webhookConfig'
    notifierStatus:
      type: object
    notifiers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/notifier'
      allOf:
      - $ref: '#/components/schemas/collection'
    objectReference:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        fieldPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kind:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespace:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        resourceVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        uid:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    openstackCloudProvider:
      type: object
      properties:
        blockStorage:
          $ref: '#/components/schemas/blockStorageOpenstackOpts'
        global:
          $ref: '#/components/schemas/globalOpenstackOpts'
        loadBalancer:
          $ref: '#/components/schemas/loadBalancerOpenstackOpts'
        metadata:
          $ref: '#/components/schemas/metadataOpenstackOpts'
        route:
          $ref: '#/components/schemas/routeOpenstackOpts'
    osInfo:
      type: object
      properties:
        dockerVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kernelVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        operatingSystem:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    ownerReference:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        blockOwnerDeletion:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        controller:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        kind:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        uid:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    pagerdutyConfig:
      required:
      - serviceKey
      type: object
      properties:
        serviceKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    podSecurityPolicyTemplate:
      type: object
      properties:
        allowPrivilegeEscalation:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        allowedCapabilities:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        allowedFlexVolumes:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/allowedFlexVolume'
          nullable: true
        allowedHostPaths:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/allowedHostPath'
          nullable: true
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        defaultAddCapabilities:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        defaultAllowPrivilegeEscalation:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        fsGroup:
          $ref: '#/components/schemas/fsGroupStrategyOptions'
        hostIPC:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        hostNetwork:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        hostPID:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        hostPorts:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/hostPortRange'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        privileged:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        readOnlyRootFilesystem:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        requiredDropCapabilities:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        runAsUser:
          $ref: '#/components/schemas/runAsUserStrategyOptions'
        seLinux:
          $ref: '#/components/schemas/seLinuxStrategyOptions'
        supplementalGroups:
          $ref: '#/components/schemas/supplementalGroupsStrategyOptions'
        uuid:
          type: string
          nullable: true
          readOnly: true
        volumes:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
    podSecurityPolicyTemplateProjectBinding:
      required:
      - targetProjectId
      - podSecurityPolicyTemplateId
      - namespaceId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        podSecurityPolicyTemplateId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of podSecurityPolicyTemplate'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        targetProjectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of project'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    podSecurityPolicyTemplateProjectBindings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/podSecurityPolicyTemplateProjectBinding'
      allOf:
      - $ref: '#/components/schemas/collection'
    podSecurityPolicyTemplates:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/podSecurityPolicyTemplate'
      allOf:
      - $ref: '#/components/schemas/collection'
    policyRule:
      type: object
      properties:
        apiGroups:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        nonResourceURLs:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        resourceNames:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        resources:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        verbs:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
    preference:
      required:
      - value
      - name
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        value:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    preferences:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/preference'
      allOf:
      - $ref: '#/components/schemas/collection'
    principal:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        extraInfo:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        loginName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        me:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        memberOf:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        principalType:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        profilePicture:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        profileURL:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        provider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    principals:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/principal'
      allOf:
      - $ref: '#/components/schemas/collection'
    privateRegistry:
      type: object
      properties:
        isDefault:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        url:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    project:
      required:
      - name
      - clusterId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        clusterId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of cluster'
          nullable: true
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/projectCondition'
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceDefaultResourceQuota:
          $ref: '#/components/schemas/namespaceResourceQuota'
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        podSecurityPolicyTemplateId:
          type: string
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        resourceQuota:
          $ref: '#/components/schemas/projectResourceQuota'
        state:
          type: string
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    projectAlert:
      required:
      - initialWaitSeconds
      - name
      - repeatIntervalSeconds
      - recipients
      - severity
      type: object
      properties:
        alertState:
          enum:
          - active
          - inactive
          - alerting
          - muted
          type: string
          default: active
          nullable: true
          readOnly: true
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        initialWaitSeconds:
          minimum: 0
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 180
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        projectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of project'
          nullable: true
        recipients:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/recipient'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        repeatIntervalSeconds:
          minimum: 0
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3600
        severity:
          enum:
          - info
          - critical
          - warning
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: critical
          nullable: true
        state:
          type: string
          readOnly: true
        targetPod:
          $ref: '#/components/schemas/targetPod'
        targetWorkload:
          $ref: '#/components/schemas/targetWorkload'
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    projectAlerts:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/projectAlert'
      allOf:
      - $ref: '#/components/schemas/collection'
    projectCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    projectLogging:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        elasticsearchConfig:
          $ref: '#/components/schemas/elasticsearchConfig'
        fluentForwarderConfig:
          $ref: '#/components/schemas/fluentForwarderConfig'
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        kafkaConfig:
          $ref: '#/components/schemas/kafkaConfig'
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        outputFlushInterval:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3
        outputTags:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        projectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of project'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        splunkConfig:
          $ref: '#/components/schemas/splunkConfig'
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/projectLoggingStatus'
          readOnly: true
        syslogConfig:
          $ref: '#/components/schemas/syslogConfig'
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    projectLoggingSpec:
      type: object
      properties:
        displayName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        elasticsearchConfig:
          $ref: '#/components/schemas/elasticsearchConfig'
        fluentForwarderConfig:
          $ref: '#/components/schemas/fluentForwarderConfig'
        kafkaConfig:
          $ref: '#/components/schemas/kafkaConfig'
        outputFlushInterval:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3
        outputTags:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        projectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of project'
          nullable: true
        splunkConfig:
          $ref: '#/components/schemas/splunkConfig'
        syslogConfig:
          $ref: '#/components/schemas/syslogConfig'
    projectLoggingStatus:
      type: object
      properties:
        appliedSpec:
          $ref: '#/components/schemas/projectLoggingSpec'
          readOnly: true
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/loggingCondition'
          nullable: true
          readOnly: true
    projectLoggings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/projectLogging'
      allOf:
      - $ref: '#/components/schemas/collection'
    projectNetworkPolicies:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/projectNetworkPolicy'
      allOf:
      - $ref: '#/components/schemas/collection'
    projectNetworkPolicy:
      required:
      - projectId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        projectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of project'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/projectNetworkPolicyStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    projectNetworkPolicyStatus:
      type: object
    projectResourceQuota:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/resourceQuotaLimit'
        usedLimit:
          $ref: '#/components/schemas/resourceQuotaLimit'
    projectRoleTemplateBinding:
      required:
      - projectId
      - roleTemplateId
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        groupId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of group'
          nullable: true
        groupPrincipalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of principal'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        namespaceId:
          type: string
          description: 'Allowed in Methods: `POST`; Id of /v3/clusters/schemas/namespace'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        projectId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of project'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        roleTemplateId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of roleTemplate'
          nullable: true
        userId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of user'
          nullable: true
        userPrincipalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of principal'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    projectRoleTemplateBindings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/projectRoleTemplateBinding'
      allOf:
      - $ref: '#/components/schemas/collection'
    projects:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/project'
      allOf:
      - $ref: '#/components/schemas/collection'
    publicEndpoint:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        allNodes:
          type: boolean
          default: false
          readOnly: true
        hostname:
          type: string
          nullable: true
          readOnly: true
        ingressId:
          type: string
          description: Id of ingress
          nullable: true
          readOnly: true
        nodeId:
          type: string
          description: Id of /v3/schemas/node
          nullable: true
          readOnly: true
        path:
          type: string
          nullable: true
          readOnly: true
        podId:
          type: string
          description: Id of pod
          nullable: true
          readOnly: true
        port:
          type: integer
          default: 0
          readOnly: true
        protocol:
          type: string
          nullable: true
          readOnly: true
        serviceId:
          type: string
          description: Id of service
          nullable: true
          readOnly: true
    question:
      type: object
      properties:
        default:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        group:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        invalidChars:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        label:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        max:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        maxLength:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        min:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        minLength:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        options:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        required:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        showIf:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        showSubquestionIf:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        subquestions:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/subQuestion'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        validChars:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        variable:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    rancherKubernetesEngineConfig:
      type: object
      properties:
        addonJobTimeout:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 30
        addons:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        addonsInclude:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        authentication:
          $ref: '#/components/schemas/authnConfig'
        authorization:
          $ref: '#/components/schemas/authzConfig'
        bastionHost:
          $ref: '#/components/schemas/bastionHost'
        cloudProvider:
          $ref: '#/components/schemas/cloudProvider'
        clusterName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ignoreDockerVersion:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
        ingress:
          $ref: '#/components/schemas/ingressConfig'
        kubernetesVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        monitoring:
          $ref: '#/components/schemas/monitoringConfig'
        network:
          $ref: '#/components/schemas/networkConfig'
        nodes:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/rkeConfigNode'
          nullable: true
        prefixPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        privateRegistries:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/privateRegistry'
          nullable: true
        services:
          $ref: '#/components/schemas/rkeConfigServices'
        sshAgentAuth:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        sshKeyPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    recipient:
      required:
      - notifierId
      - notifierType
      type: object
      properties:
        notifierId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of notifier'
          nullable: true
        notifierType:
          enum:
          - slack
          - email
          - pagerduty
          - webhook
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        recipient:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    resourceQuotaLimit:
      type: object
      properties:
        configMaps:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        limitsCpu:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        limitsMemory:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        persistentVolumeClaims:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        pods:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        replicationControllers:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        requestsCpu:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        requestsMemory:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        requestsStorage:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        secrets:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        services:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        servicesLoadBalancers:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        servicesNodePorts:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    rkeConfigNode:
      type: object
      properties:
        address:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        dockerSocket:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        hostnameOverride:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        internalAddress:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        nodeId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of node'
          nullable: true
        port:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        role:
          enum:
          - etcd
          - worker
          - controlplane
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        sshAgentAuth:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        sshKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: password
          nullable: true
        sshKeyPath:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    rkeConfigServices:
      type: object
      properties:
        etcd:
          $ref: '#/components/schemas/etcdService'
        kubeApi:
          $ref: '#/components/schemas/kubeAPIService'
        kubeController:
          $ref: '#/components/schemas/kubeControllerService'
        kubelet:
          $ref: '#/components/schemas/kubeletService'
        kubeproxy:
          $ref: '#/components/schemas/kubeproxyService'
        scheduler:
          $ref: '#/components/schemas/schedulerService'
    roleTemplate:
      required:
      - projectCreatorDefault
      - clusterCreatorDefault
      - name
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        builtin:
          type: boolean
          default: false
          readOnly: true
        clusterCreatorDefault:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        context:
          enum:
          - project
          - cluster
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        external:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        hidden:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        locked:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        projectCreatorDefault:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        roleTemplateIds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; Array of Ids of roleTemplate'
          items:
            type: string
          nullable: true
        rules:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/policyRule'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    roleTemplates:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/roleTemplate'
      allOf:
      - $ref: '#/components/schemas/collection'
    routeOpenstackOpts:
      type: object
      properties:
        router-id:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    runAsUserStrategyOptions:
      type: object
      properties:
        ranges:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/idRange'
          nullable: true
        rule:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    schedulerService:
      type: object
      properties:
        extraArgs:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        extraBinds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        extraEnv:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        image:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    seLinuxOptions:
      type: object
      properties:
        level:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        role:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    seLinuxStrategyOptions:
      type: object
      properties:
        rule:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        seLinuxOptions:
          $ref: '#/components/schemas/seLinuxOptions'
    setting:
      required:
      - name
      - value
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        customized:
          type: boolean
          default: false
          readOnly: true
        default:
          type: string
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        value:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    settings:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/setting'
      allOf:
      - $ref: '#/components/schemas/collection'
    slackConfig:
      required:
      - defaultRecipient
      - url
      type: object
      properties:
        defaultRecipient:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        url:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    smtpConfig:
      required:
      - sender
      - tls
      - defaultRecipient
      - host
      - port
      type: object
      properties:
        defaultRecipient:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        host:
          $ref: '#/components/schemas/'
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        port:
          maximum: 65535
          minimum: 1
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 587
        sender:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        tls:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
        username:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    splunkConfig:
      required:
      - endpoint
      - token
      type: object
      properties:
        certificate:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientCert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientKeyPass:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        endpoint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        index:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        source:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        sslVerify:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        token:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    subQuestion:
      type: object
      properties:
        default:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        group:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        invalidChars:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        label:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        max:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        maxLength:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        min:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        minLength:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        options:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        required:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        showIf:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        validChars:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        variable:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    supplementalGroupsStrategyOptions:
      type: object
      properties:
        ranges:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/idRange'
          nullable: true
        rule:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    syslogConfig:
      required:
      - endpoint
      type: object
      properties:
        certificate:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientCert:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        clientKey:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        endpoint:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        program:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        protocol:
          enum:
          - udp
          - tcp
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: udp
          nullable: true
        severity:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: notice
          nullable: true
        sslVerify:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        token:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    taint:
      type: object
      properties:
        effect:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        key:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        timeAdded:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          format: date-time
          nullable: true
        value:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    targetEvent:
      required:
      - eventType
      - resourceKind
      type: object
      properties:
        eventType:
          enum:
          - Normal
          - Warning
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: Warning
          nullable: true
        resourceKind:
          enum:
          - Pod
          - Node
          - Deployment
          - StatefulSet
          - DaemonSet
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    targetNode:
      required:
      - condition
      type: object
      properties:
        condition:
          enum:
          - notready
          - mem
          - cpu
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: notready
          nullable: true
        cpuThreshold:
          minimum: 1
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 70
        memThreshold:
          maximum: 100
          minimum: 1
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 70
        nodeId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of node'
          nullable: true
        selector:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
    targetPod:
      required:
      - condition
      - podId
      type: object
      properties:
        condition:
          enum:
          - notrunning
          - notscheduled
          - restarts
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: notrunning
          nullable: true
        podId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of /v3/projects/schemas/pod'
          nullable: true
        restartIntervalSeconds:
          minimum: 1
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 300
        restartTimes:
          minimum: 1
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 3
    targetSystemService:
      required:
      - condition
      type: object
      properties:
        condition:
          enum:
          - etcd
          - controller-manager
          - scheduler
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          default: scheduler
          nullable: true
    targetWorkload:
      required:
      - availablePercentage
      type: object
      properties:
        availablePercentage:
          maximum: 100
          minimum: 1
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 70
        selector:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        workloadId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    template:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        catalogId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of catalog'
          nullable: true
        categories:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            type: string
          nullable: true
        category:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        defaultTemplateVersionId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of templateVersion'
          nullable: true
        defaultVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        folderName:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        icon:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        iconFilename:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        maintainer:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        path:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        projectURL:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        readme:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/templateStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        upgradeFrom:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
        versionLinks:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        versions:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/templateVersionSpec'
          nullable: true
    templateContent:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        data:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    templateContents:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/templateContent'
      allOf:
      - $ref: '#/components/schemas/collection'
    templateStatus:
      type: object
    templateVersion:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        appReadme:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        digest:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        externalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        files:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        kubeVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        questions:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/question'
          nullable: true
        rancherVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        readme:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        requiredNamespace:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        state:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/templateVersionStatus'
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        upgradeVersionLinks:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        uuid:
          type: string
          nullable: true
          readOnly: true
        version:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    templateVersionSpec:
      type: object
      properties:
        appReadme:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        digest:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        externalId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        files:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        kubeVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        questions:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`'
          items:
            $ref: '#/components/schemas/question'
          nullable: true
        rancherVersion:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        readme:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        requiredNamespace:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        upgradeVersionLinks:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        version:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    templateVersionStatus:
      type: object
    templateVersions:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/templateVersion'
      allOf:
      - $ref: '#/components/schemas/collection'
    templates:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/template'
      allOf:
      - $ref: '#/components/schemas/collection'
    token:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        authProvider:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        current:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        expired:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        expiresAt:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        groupPrincipals:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; Array of Ids of principal'
          items:
            type: string
          nullable: true
        isDerived:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        name:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: 'Allowed in Methods: `POST`; Must be valid Hostname'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        providerInfo:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        token:
          type: string
          description: 'Allowed in Methods: `POST`'
          nullable: true
        ttl:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        userId:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of user'
          nullable: true
        userPrincipal:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; Id of principal'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    tokens:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/token'
      allOf:
      - $ref: '#/components/schemas/collection'
    user:
      type: object
      properties:
        annotations:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/userCondition'
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        creatorId:
          type: string
          description: Id of /v3/schemas/user
          readOnly: true
        description:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        enabled:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: true
          nullable: true
        id:
          pattern: ^(\w|[A-Za-z0-9-\.]*\w)$
          type: string
          description: Must be valid Hostname
          nullable: true
          readOnly: true
        labels:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
          example:
            key: value
        me:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        mustChangePassword:
          type: boolean
          description: 'Allowed in Methods: `POST` `PUT`'
          default: false
        name:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ownerReference'
          nullable: true
          readOnly: true
        password:
          type: string
          description: 'Allowed in Methods: `POST`'
          nullable: true
        principalIds:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; Array of Ids of principal'
          items:
            type: string
          nullable: true
        removed:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        state:
          type: string
          readOnly: true
        transitioning:
          enum:
          - "yes"
          - "no"
          - error
          type: string
          readOnly: true
        transitioningMessage:
          type: string
          readOnly: true
        username:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        uuid:
          type: string
          nullable: true
          readOnly: true
    userCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        lastUpdateTime:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        message:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        reason:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        status:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        type:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    users:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/user'
      allOf:
      - $ref: '#/components/schemas/collection'
    virtualCenterConfig:
      type: object
      properties:
        datacenters:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        port:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        soap-roundtrip-count:
          type: integer
          description: 'Allowed in Methods: `POST` `PUT`'
          default: 0
        user:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    vmwarevsphereconfig:
      type: object
      properties:
        boot2dockerUrl:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere URL for boot2docker
            image'
          default: ""
        cfgparam:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; vSphere vm configuration
            parameters (used for guestinfo)'
          items:
            type: string
        cloudinit:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere cloud-init file
            or url to set in the guestinfo'
          default: ""
        cpuCount:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere CPU number for docker
            VM'
          default: "2"
        datacenter:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere datacenter for docker
            VM'
          default: ""
        datastore:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere datastore for docker
            VM'
          default: ""
        diskSize:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere size of disk for
            docker VM (in MB)'
          default: "20480"
        folder:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere folder for the docker
            VM. This folder must already exist in the datacenter.'
          default: ""
        hostsystem:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere compute resource
            where the docker VM will be instantiated. This can be omitted if using
            a cluster with DRS.'
          default: ""
        memorySize:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere size of memory for
            docker VM (in MB)'
          default: "2048"
        network:
          type: array
          description: 'Allowed in Methods: `POST` `PUT`; vSphere network where the
            docker VM will be attached'
          items:
            type: string
        password:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere password'
          format: password
        pool:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere resource pool for
            docker VM'
          default: ""
        username:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere username'
          default: ""
        vcenter:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere IP/hostname for
            vCenter'
          default: ""
        vcenterPort:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`; vSphere Port for vCenter'
          default: "443"
    vsphereCloudProvider:
      type: object
      properties:
        disk:
          $ref: '#/components/schemas/diskVsphereOpts'
        global:
          $ref: '#/components/schemas/globalVsphereOpts'
        network:
          $ref: '#/components/schemas/networkVshpereOpts'
        virtualCenter:
          type: object
          description: 'Allowed in Methods: `POST` `PUT`'
          additionalProperties:
            $ref: '#/components/schemas/virtualCenterConfig'
          nullable: true
        workspace:
          $ref: '#/components/schemas/workspaceVsphereOpts'
    webhookConfig:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
    workspaceVsphereOpts:
      type: object
      properties:
        datacenter:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        default-datastore:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        folder:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        resourcepool-path:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
        server:
          type: string
          description: 'Allowed in Methods: `POST` `PUT`'
          nullable: true
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
  securitySchemes:
    basic:
      type: http
      scheme: basic
    bearer:
      type: http
      scheme: bearer
      bearerFormat: RANCHER_ACCESS_KEY:RANCHER_SECRET_KEY
security:
- basic: []
- bearer: []
